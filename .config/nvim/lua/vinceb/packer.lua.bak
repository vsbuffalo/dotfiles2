local ensure_packer = function()
    local fn = vim.fn
    local install_path = fn.stdpath('data') .. '/site/pack/packer/start/packer.nvim'
    if fn.empty(fn.glob(install_path)) > 0 then
        fn.system({ 'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path })
        vim.cmd [[packadd packer.nvim]]
        return true
    end
    return false
end

vim.cmd [[packadd packer.nvim]]

local packer_bootstrap = ensure_packer()

return require('packer').startup(function(use)
    -- Packer can manage itself
    use 'wbthomason/packer.nvim'

    -- conform.nvim manages and apply code formatting configurations
    -- for various programming languages.
    use "stevearc/conform.nvim"

    -- nvim-tree is a file explorer for Neovim.
    use 'nvim-tree/nvim-web-devicons'
    use {
        'nvim-tree/nvim-tree.lua',
        requires = {
            'nvim-tree/nvim-web-devicons', -- optional
        },
    }

    -- lualine.nvim is a fast and easy-to-configure statusline plugin for Neovim.
    use {
        'nvim-lualine/lualine.nvim',
        requires = { 'nvim-tree/nvim-web-devicons' },
        config = function()
            require('lualine').setup({ options = { theme = 'tokyonight' } })
        end,
    }

    -- copilot.lua is a Neovim plugin that provides GitHub Copilot support.
    use { 'zbirenbaum/copilot.lua' }
    use { "neovim/nvim-lspconfig" }


    -- nvim-cmp is a completion engine for Neovim.
    use { "hrsh7th/nvim-cmp" }
    use { "hrsh7th/cmp-nvim-lsp" }
    use { "L3MON4D3/LuaSnip" }
    use { "saadparwaiz1/cmp_luasnip" }

    use { "williamboman/mason.nvim" }
    use { "williamboman/mason-lspconfig.nvim" }


    -- copilot-cmp is a Neovim plugin that integrates GitHub Copilot
    -- with nvim-cmp
    use {
        'zbirenbaum/copilot-cmp',
        after = { 'copilot.lua' },
        config = function()
            require('copilot_cmp').setup()
        end,
    }

    -- telescope.nvim is a fuzzy finder for Neovim.
    use {
        'nvim-telescope/telescope.nvim',
        tag = '0.1.5',
        requires = { { 'nvim-lua/plenary.nvim' } }
    }

    -- neotest is a Neovim plugin for running and managing tests.
    use {
        "nvim-neotest/neotest",
        requires = {
            "nvim-neotest/nvim-nio",
            "nvim-lua/plenary.nvim",
            "antoinemadec/FixCursorHold.nvim",
            "nvim-treesitter/nvim-treesitter",
            "nvim-neotest/neotest-python",
        }
    }

    -- mini.align for aligning blocks of text
    use {
        'echasnovski/mini.align',
        branch = 'stable',               -- pin to the stable tag; omit if you track main
        config = function()
            require('mini.align').setup()  -- default settings are perfect for 99 % of cases

    -- Key-mappings in Primeagen style: ga (no preview), gA (live preview)
    vim.keymap.set({ 'n', 'x' }, 'ga', '<Plug>(minialign-start)')
    vim.keymap.set({ 'n', 'x' }, 'gA', '<Plug>(minialign-start-with-preview)')
  end,
}

    -- snakemake.nvim is a Neovim plugin for Snakemake, a workflow management system.
    use {
        'snakemake/snakemake',
        rtp = 'misc/vim/',
        ft = { 'snakemake' }
    }

    -- webapi-vim is a Neovim plugin for web API testing.
    use 'mattn/webapi-vim'

    -- R language support
    use {
        "R-nvim/R.nvim",
        config = function()
            require("R").setup({
                R_args = { "--quiet", "--no-save" },
                hook = {
                    on_filetype = function()
                        vim.api.nvim_buf_set_keymap(0, "n", "<Enter>", "<Plug>RDSendLine", {})
                        vim.api.nvim_buf_set_keymap(0, "v", "<Enter>", "<Plug>RSendSelection", {})
                    end,
                },
            })
        end,
    }

    use {
        "R-nvim/cmp-r",
        config = function()
            require("cmp").setup({
                sources = {
                    { name = "cmp_r" },
                    { name = "nvim_lsp" },
                    { name = "buffer" },
                    { name = "path" },
                }
            })
            require("cmp_r").setup({})
        end,
    }

    -- comment.nvim is a Neovim plugin for easy commenting of code.
    use {
        'numToStr/Comment.nvim',
        config = function()
            require('Comment').setup()
        end
    }

    -- treesitter.nvim is a Neovim plugin for syntax highlighting and code parsing.
    use {
        'nvim-treesitter/nvim-treesitter',
        run = ':TSUpdate'
    }

    -- fugitive.vim is a Git wrapper for Neovim.
    -- use 'tpope/vim-fugitive'

    use {
        'lewis6991/gitsigns.nvim',
        requires = { 'nvim-lua/plenary.nvim' },
        config = function()
            require('gitsigns').setup {
                current_line_blame = true,
                current_line_blame_opts = {
                    delay = 250,
                    virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
                },
                current_line_blame_formatter = ' <author>, <author_time:%Y-%m-%d> - <summary>',
            }

            -- optional keymap to toggle inline blame
            vim.keymap.set('n', '<leader>bb', function()
                require('gitsigns').toggle_current_line_blame()
            end, { desc = ' Toggle git blame for current line' })
        end
    }


    -- rust-tools.nvim is a Neovim plugin for Rust development.
    use { 'simrat39/rust-tools.nvim' }


    -- vimtex is a Neovim plugin for LaTeX editing.
    use 'lervag/vimtex'

    -- yanky.nvim is a Neovim plugin for managing the yank history.
    use {
        'gbprod/yanky.nvim',
        config = function()
            require("yanky").setup({
                ring = {
                    history_length = 100,
                    storage = "shada",
                    sync_with_numbered_registers = true,
                    cancel_event = "update",
                },
                highlight = {
                    on_put = true,
                    on_yank = true,
                    timer = 500,
                },
            })
        end,
    }

    -- stan-vim is a Neovim plugin for Stan language support.
    use 'eigenfoo/stan-vim'

    -- eidos.vim is a Neovim plugin for Eidos, a tool for creating and managing Eidos models.
    use 'vsbuffalo/eidos.vim'

    -- rose-pine is a Neovim color scheme.
    use {
        'rose-pine/neovim',
        as = 'rose-pine',
        config = function()
            vim.cmd('colorscheme rose-pine')
        end
    }

    -- tokyonight.nvim is a Neovim color scheme.
    use {
        "folke/tokyonight.nvim",
        lazy = false,
        priority = 1000,
    }

    -- kanagawa.nvim is a Neovim color scheme.
    use "rebelot/kanagawa.nvim"

    -- catppuccin.nvim is a Neovim color scheme.
    use { "catppuccin/nvim", as = "catppuccin" }

    -- nvim-dap is a Debug Adapter Protocol client for Neovim
    use { 'mfussenegger/nvim-dap' }
    
    -- nvim-dap-ui provides a UI for nvim-dap
    use { 
        "rcarriga/nvim-dap-ui", 
        requires = {"mfussenegger/nvim-dap", "nvim-neotest/nvim-nio"}
    }
    
    -- nvim-dap-python is a Python adapter for nvim-dap
    use { 'mfussenegger/nvim-dap-python' }

    if packer_bootstrap then
        require('packer').sync()
    end
end)
